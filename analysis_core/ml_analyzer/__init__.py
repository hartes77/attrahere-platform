"""
ML Code Quality Platform - Analysis Core

Core library for detecting and fixing ML-specific anti-patterns in Python code.
Focus on issues generated by AI code generation tools (Copilot, ChatGPT, etc.)
"""

__version__ = "0.1.0"
__author__ = "ML Code Quality Platform Team"

# Core exports
from .ast_engine import MLSemanticAnalyzer, ASTAnalysisResult
from .ml_patterns import (
    DataLeakageDetector,
    GPUMemoryLeakDetector, 
    MagicNumberExtractor,
    ReproducibilityChecker,
    MLAntiPattern,
    PatternSeverity
)
from .refactoring import (
    MLRefactoringEngine,
    PureFunctionExtractor,
    DependencyInjector,
    RefactoringProposal
)
# Note: test_generator and confidence modules to be implemented
# from .test_generator import (
#     CharacterizationTestGenerator,
#     SeamDetector,
#     MockGenerator
# )
# from .confidence import ConfidenceEngine, ConfidenceScore

# High-level API
from .analyzer import MLCodeAnalyzer

__all__ = [
    # Core analysis
    "MLSemanticAnalyzer",
    "ASTAnalysisResult",
    "MLCodeAnalyzer",
    
    # Pattern detection
    "DataLeakageDetector",
    "GPUMemoryLeakDetector", 
    "MagicNumberExtractor",
    "ReproducibilityChecker",
    "MLAntiPattern",
    "PatternSeverity",
    
    # Refactoring
    "MLRefactoringEngine",
    "PureFunctionExtractor",
    "DependencyInjector", 
    "RefactoringProposal",
    
    # Test generation - to be implemented
    # "CharacterizationTestGenerator",
    # "SeamDetector", 
    # "MockGenerator",
    
    # Confidence scoring - to be implemented
    # "ConfidenceEngine",
    # "ConfidenceScore",
]

# Package metadata
PACKAGE_INFO = {
    "name": "ml-analyzer",
    "version": __version__,
    "description": "ML code anti-pattern detection and refactoring",
    "python_requires": ">=3.9",
    "ml_frameworks_supported": [
        "scikit-learn",
        "pytorch", 
        "tensorflow",
        "keras",
        "xgboost",
        "lightgbm"
    ],
    "pattern_categories": [
        "data_leakage",
        "memory_leaks", 
        "magic_numbers",
        "reproducibility",
        "performance"
    ]
}